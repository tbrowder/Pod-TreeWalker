use Test;
use Pod::TreeWalker;
use lib $*PROGRAM.sibling('lib');
use TestListener;

plan 1;

=begin pod

=for para :key1<a>
Some more text with a config key.

=end pod

# we just need some code here to break up the POD. It doesn't matter what it
# is, really.
my $l = TestListener.new;
Pod::TreeWalker.new(:listener($l)).walk-pod($=pod);

my $code = "anything";

my @expect = (

    { :start, :type('named'), :name('pod'),  :config({}) },

    { :start, :type('named'), :name('para'), :config({:key1('a')}) },

    { :start(Bool::True), :type("para")}, 
    { :text('Some more text with a config key.') },
    { :end(Bool::True), :type("para")}, 

    { :end, :type('named'), :name('para'), :config({:key1('a')})  },

    { :end, :type('named'), :name('pod'),  :config({}) },
);

is-deeply $l.events, @expect, 'got expected events for pod document';

# vim: expandtab shiftwidth=4
