use Test;

use Pod::TreeWalker;

use lib $*PROGRAM.sibling('lib');
use TestListener;

plan 1;

#===========================================================
# 11 of 19
#===========================================================

my $pod_i = 0;

=begin pod
=head1 HEADING1
=head2 HEADING2
=end pod

subtest {
    my $l = TestListener.new;
    Pod::TreeWalker.new(:listener($l)).walk-pod($=pod[$pod_i++]);

    my @expect = (
         { :config({}), :start, :type('named'), :name('pod') },
         { :start, :type('heading'), :level(1) },
         { :start, :type('para') },
         { :text('HEADING1') },
         { :end, :type('para') },
         { :end, :type('heading'), :level(1) },
         { :start, :type('heading'), :level(2) },
         { :start, :type('para') },
         { :text('HEADING2') },
         { :end, :type('para') },
         { :end, :type('heading'), :level(2) },
         { :config({}), :end, :type('named'), :name('pod') },
    );

    is-deeply $l.events, @expect, 'got expected events';
}, 'single =head1';

#===========================================================
# 12 of 19
#===========================================================

# vim: expandtab shiftwidth=4
