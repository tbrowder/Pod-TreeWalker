use Test; use Pod::TreeWalker;
use lib $*PROGRAM.sibling('lib');
use TestListener;

plan 1;

#===============================================
# 21 of 26
#===============================================

my $pod_i = 0;

=begin pod

Para 1

=item1 Item

Para 2

=end pod

subtest {
    my $l = TestListener.new;
    Pod::TreeWalker.new(:listener($l)).walk-pod($=pod[$pod_i++]);

    my @expect = (
         { :config({}), :start, :type('named'), :name('pod') },
         { :start, :type('para') },
         { :text('Para 1') },
         { :end, :type('para') },
         { :start, :type('list'), :level(1), :numbered(Bool::False)  },
         { :start, :type('item'), :level(1), :numbered(Bool::False) },
         { :start, :type('para') },
         { :text('Item') },
         { :end, :type('para') },
         { :end, :type('item'), :level(1), :numbered(Bool::False) },
         { :end, :type('list'), :level(1), :numbered(Bool::False) },
         { :start, :type('para') },
         { :text('Para 2') },
         { :end, :type('para') },
         { :config({}), :end, :type('named'), :name('pod') },
    );

    is-deeply $l.events, @expect, 'got expected events';
}, 'single-item list surrounded by paragraphs';

#===============================================
# 22 of 26
#===============================================

# vim: expandtab shiftwidth=4
